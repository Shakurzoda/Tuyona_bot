import logging
import asyncio
import os
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton, Message
)
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")
    raise ValueError("BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
if not CHANNEL_ID:
    logger.error("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")
    raise ValueError("CHANNEL_ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
if not (CHANNEL_ID.startswith("-100") and CHANNEL_ID[1:].isdigit()) and not CHANNEL_ID.startswith("@"):
    logger.error("CHANNEL_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890) –∏–ª–∏ –∏–º–µ–Ω–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel)")
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CHANNEL_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_data = {}
user_step = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
category_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–µ—Å—Ç–æ—Ä–∞–Ω—ã"), KeyboardButton(text="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="–ü–µ–≤–µ—Ü"), KeyboardButton(text="–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã")],
        [KeyboardButton(text="–û–ø–µ—Ä–∞—Ç–æ—Ä/–§–æ—Ç–æ–≥—Ä–∞—Ñ"), KeyboardButton(text="–ú—É–∑—ã–∫–∞–Ω—Ç—ã")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

back_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")]
    ],
    resize_keyboard=True
)

price_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="5000 TJS"), KeyboardButton(text="10000 TJS")],
        [KeyboardButton(text="–æ—Ç 15000 TJS"), KeyboardButton(text="–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")]
    ],
    resize_keyboard=True
)

confirm_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="confirm")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_phone")]
    ]
)

def get_media_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìé –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_media")],
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="proceed_to_price")]
        ]
    )

def sanitize_text(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2."""
    if not text:
        return text
    reserved_chars = r'[_*[\]()~`>#+=|{}.!-]'
    return re.sub(reserved_chars, r'\\\g<0>', text)

@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data.pop(user_id, None)
    user_step.pop(user_id, None)
    user_data[user_id] = {}
    user_step[user_id] = "category"

    name = message.from_user.first_name or "–≥–æ—Å—Ç—å"
    try:
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –Ø –±–æ—Ç Sino –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Tuyona. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞:",
            reply_markup=category_keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    user_id = message.from_user.id
    step = user_step.get(user_id, "category")

    try:
        if step == "company":
            user_step[user_id] = "category"
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard)
        elif step == "media":
            user_step[user_id] = "company"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∏–º—è:", reply_markup=back_keyboard)
        elif step == "price":
            user_step[user_id] = "media"
            await message.answer(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–æ 5 –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (1 –≤–∏–¥–µ–æ –∏ –¥–æ 4 —Ñ–æ—Ç–æ, –∏–ª–∏ —Ç–æ–ª—å–∫–æ 5 —Ñ–æ—Ç–æ, –∏–ª–∏ 1 –≤–∏–¥–µ–æ):",
                reply_markup=back_keyboard
            )
        elif step == "phone":
            user_step[user_id] = "price"
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≤–∞—à—É —É—Å–ª—É–≥—É:", reply_markup=price_keyboard)
            await message.answer("–í–∞–ª—é—Ç–∞: —Ç–∞–¥–∂–∏–∫—Å–∫–∏–µ —Å–æ–º–æ–Ω–∏ (TJS)")
        else:
            await message.answer("–í—ã –≤ –Ω–∞—á–∞–ª–µ. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã '–ù–∞–∑–∞–¥': {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@dp.message(F.text == "üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")
async def reset_handler(message: Message):
    user_id = message.from_user.id
    user_data.pop(user_id, None)
    user_step.pop(user_id, None)
    user_data[user_id] = {}
    user_step[user_id] = "category"
    try:
        await message.answer("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@dp.callback_query(F.data == "back_to_phone")
async def back_to_phone(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_step[user_id] = "phone"
    try:
        await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@dp.callback_query(F.data == "add_media")
async def add_media(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_step[user_id] = "media"
    try:
        await callback.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–æ 5 –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (1 –≤–∏–¥–µ–æ –∏ –¥–æ 4 —Ñ–æ—Ç–æ, –∏–ª–∏ —Ç–æ–ª—å–∫–æ 5 —Ñ–æ—Ç–æ, –∏–ª–∏ 1 –≤–∏–¥–µ–æ):",
            reply_markup=back_keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@dp.callback_query(F.data == "proceed_to_price")
async def proceed_to_price(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_step[user_id] = "price"
    try:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≤–∞—à—É —É—Å–ª—É–≥—É:", reply_markup=price_keyboard)
        await callback.message.answer("–í–∞–ª—é—Ç–∞: —Ç–∞–¥–∂–∏–∫—Å–∫–∏–µ —Å–æ–º–æ–Ω–∏ (TJS)")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤–≤–æ–¥—É —Ü–µ–Ω—ã: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@dp.message(F.text.in_({
    "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "–ü–µ–≤–µ—Ü", "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã", "–û–ø–µ—Ä–∞—Ç–æ—Ä/–§–æ—Ç–æ–≥—Ä–∞—Ñ", "–ú—É–∑—ã–∫–∞–Ω—Ç—ã"
}))
async def category_handler(message: Message):
    user_id = message.from_user.id
    user_data[user_id]["category"] = message.text
    user_step[user_id] = "company"
    try:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∏–º—è:", reply_markup=back_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@dp.message()
async def handle_steps(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        try:
            await message.answer("–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ user_data: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            return

    step = user_step.get(user_id)
    data = user_data[user_id]

    try:
        if step == "company":
            if len(message.text) > 100:
                await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            data["company"] = sanitize_text(message.text)
            data["media"] = []
            data["video_uploaded"] = False
            user_step[user_id] = "media"
            await message.answer(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–æ 5 –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (1 –≤–∏–¥–µ–æ –∏ –¥–æ 4 —Ñ–æ—Ç–æ, –∏–ª–∏ —Ç–æ–ª—å–∫–æ 5 —Ñ–æ—Ç–æ, –∏–ª–∏ 1 –≤–∏–¥–µ–æ):",
                reply_markup=back_keyboard
            )
            return

        if step == "media":
            if message.text and ("instagram.com" in message.text or "youtu" in message.text):
                data["link"] = message.text
                user_step[user_id] = "price"
                await message.answer("–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≤–∞—à—É —É—Å–ª—É–≥—É:", reply_markup=price_keyboard)
                await message.answer("–í–∞–ª—é—Ç–∞: —Ç–∞–¥–∂–∏–∫—Å–∫–∏–µ —Å–æ–º–æ–Ω–∏ (TJS)")
                return

            if "media" not in data:
                data["media"] = []
                data["video_uploaded"] = False

            media_count = len(data["media"])

            if message.video:
                if data["video_uploaded"]:
                    await message.answer("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ.")
                    return
                if media_count >= 5:
                    await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 5 —Ñ–∞–π–ª–æ–≤.")
                    return
                data["media"].append(("video", message.video.file_id))
                data["video_uploaded"] = True
                await message.answer(f"–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –§–∞–π–ª–æ–≤: {media_count + 1}/5")
            elif message.photo:
                if media_count >= 5:
                    await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 5 —Ñ–∞–π–ª–æ–≤.")
                    return
                data["media"].append(("photo", message.photo[-1].file_id))
                await message.answer(f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –§–∞–π–ª–æ–≤: {media_count + 1}/5")
            else:
                await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è).")
                return

            if len(data["media"]) < 5:
                await message.answer(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(data['media'])}/5", reply_markup=get_media_keyboard())
            else:
                user_step[user_id] = "price"
                await message.answer("–ó–∞–≥—Ä—É–∂–µ–Ω–æ 5 —Ñ–∞–π–ª–æ–≤ ‚úÖ")
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≤–∞—à—É —É—Å–ª—É–≥—É:", reply_markup=price_keyboard)
                await message.answer("–í–∞–ª—é—Ç–∞: —Ç–∞–¥–∂–∏–∫—Å–∫–∏–µ —Å–æ–º–æ–Ω–∏ (TJS)")
            return

        if step == "price":
            if re.match(r"^(–æ—Ç\s)?\d+(\s?(TJS|—Å–æ–º–æ–Ω–∏))?$", message.text.strip()) or message.text.strip() == "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è":
                data["price"] = sanitize_text(message.text)
                user_step[user_id] = "phone"
                await message.answer("–¶–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +992123456789 –∏–ª–∏ 123456789):", reply_markup=back_keyboard)
            else:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 5000, 5000 TJS, –æ—Ç 10000 —Å–æ–º–æ–Ω–∏ –∏–ª–∏ –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è.")
            return

        if step == "phone":
            phone = message.text.strip()
            if re.match(r"^(\+992)?\d{9}$", phone):
                data["phone"] = sanitize_text(phone)
                user_step[user_id] = "confirm"

                summary = (
                    f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:\n\n"
                    f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
                    f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('company')}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {data.get('link', '‚Äî')}\n"
                    f"üìé –§–∞–π–ª–æ–≤: {len(data.get('media', []))}\n"
                    f"üí∞ –¶–µ–Ω–∞: {data.get('price')}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n\n"
                    f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
                )
                await message.answer(summary, reply_markup=confirm_keyboard, parse_mode="MarkdownV2")
            else:
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +992123456789 –∏–ª–∏ 123456789).")
            return

        await message.answer("–°–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–≥–∞ {step}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@dp.callback_query(F.data == "confirm")
async def confirm_submission(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = user_data.get(user_id)
    if not data:
        try:
            await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ /start.")
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        return

    text = (
        f"üéâ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞\!\n\n"
        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('company')}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {data.get('link', '‚Äî')}\n"
        f"üí∞ –¶–µ–Ω–∞: {data.get('price')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}"
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
        await bot.send_message(CHANNEL_ID, text, parse_mode="MarkdownV2")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if data.get("media"):
            media_group = []
            for media_type, file_id in data["media"]:
                if media_type == "photo":
                    media_group.append(types.InputMediaPhoto(media=file_id))
                elif media_type == "video":
                    media_group.append(types.InputMediaVideo(media=file_id))
            if media_group:
                await bot.send_media_group(CHANNEL_ID, media_group[:10])

        await callback.message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=ReplyKeyboardRemove())
        await callback.message.answer("–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É? –í–≤–µ–¥–∏—Ç–µ /start")

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data.pop(user_id, None)
        user_step.pop(user_id, None)

    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

    try:
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ callback: {e}")

async def main():
    try:
        await dp.start_polling(bot)
    except asyncio.exceptions.CancelledError:
        logger.info("–ü–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
        try:
            await bot.send_message(CHANNEL_ID, "–ë–æ—Ç —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        except Exception as send_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª: {send_e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")