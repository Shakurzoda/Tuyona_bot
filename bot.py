import logging
import asyncio
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton, Message
)
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # –ü—Ä–∏–º–µ—Ä: -1001234567890 –∏–ª–∏ @tuyona_channel

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

user_data = {}
user_step = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
category_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–µ—Å—Ç–æ—Ä–∞–Ω—ã"), KeyboardButton(text="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="–ü–µ–≤–µ—Ü"), KeyboardButton(text="–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã")],
        [KeyboardButton(text="–û–ø–µ—Ä–∞—Ç–æ—Ä/–§–æ—Ç–æ–≥—Ä–∞—Ñ"), KeyboardButton(text="–ú—É–∑—ã–∫–∞–Ω—Ç—ã")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

back_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

confirm_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="confirm")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_phone")]
    ]
)

@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {}
    user_step[user_id] = "category"

    name = message.from_user.first_name or "–≥–æ—Å—Ç—å"
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –Ø –±–æ—Ç Sino –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Tuyona. "
        f"–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞—è–≤–∫–∏. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º."
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º:",
        reply_markup=category_keyboard
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    user_id = message.from_user.id
    step = user_step.get(user_id)

    if step == "company":
        user_step[user_id] = "category"
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard)
    elif step == "media":
        user_step[user_id] = "company"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∏–º—è:", reply_markup=back_keyboard)
    elif step == "price":
        user_step[user_id] = "media"
        await message.answer(
            "–°–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–æ 5 –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.\n–î–æ–ø—É—Å—Ç–∏–º–æ: 1 –≤–∏–¥–µ–æ –∏ –¥–æ 4 —Ñ–æ—Ç–æ, –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ.",
            reply_markup=back_keyboard
        )
    elif step == "phone":
        user_step[user_id] = "price"
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≤–∞—à—É —É—Å–ª—É–≥—É:", reply_markup=back_keyboard)
    else:
        await message.answer("–í—ã —É–∂–µ –≤ –Ω–∞—á–∞–ª–µ. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

@dp.callback_query(F.data == "back_to_phone")
async def back_to_phone(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_step[user_id] = "phone"
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_keyboard)
    await callback.answer()

@dp.message(F.text.in_({
    "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "–ü–µ–≤–µ—Ü", "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã", "–û–ø–µ—Ä–∞—Ç–æ—Ä/–§–æ—Ç–æ–≥—Ä–∞—Ñ", "–ú—É–∑—ã–∫–∞–Ω—Ç—ã"
}))
async def category_handler(message: Message):
    user_id = message.from_user.id
    user_data[user_id]["category"] = message.text
    user_step[user_id] = "company"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∏–º—è:", reply_markup=back_keyboard)

@dp.message()
async def handle_steps(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    step = user_step.get(user_id)
    data = user_data[user_id]

    if step == "company":
        data["company"] = message.text
        data["media"] = []
        data["video_uploaded"] = False
        user_step[user_id] = "media"
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–æ 5 —Ñ–∞–π–ª–æ–≤: —Ñ–æ—Ç–æ –∏/–∏–ª–∏ –≤–∏–¥–µ–æ.\n"
            "–ú–æ–∂–Ω–æ 1 –≤–∏–¥–µ–æ –∏ –¥–æ 4 —Ñ–æ—Ç–æ, –∏–ª–∏ 5 —Ñ–æ—Ç–æ, –∏–ª–∏ —Ç–æ–ª—å–∫–æ 1 –≤–∏–¥–µ–æ.",
            reply_markup=back_keyboard
        )
        return

    if step == "media" and message.text and ("instagram.com" in message.text or "youtu" in message.text):
        data["link"] = message.text
        user_step[user_id] = "price"
        await message.answer("–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É:", reply_markup=back_keyboard)
        return

    if step == "media":
        if "media" not in data:
            data["media"] = []
            data["video_uploaded"] = False

        media_count = len(data["media"])

        if message.video:
            if data["video_uploaded"]:
                await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∏–¥–µ–æ. –ú–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ.")
                return
            if media_count >= 5:
                await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 5 —Ñ–∞–π–ª–æ–≤.")
                return
            data["media"].append(message.video.file_id)
            data["video_uploaded"] = True
            await message.answer(f"–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –§–∞–π–ª–æ–≤: {len(data['media'])}/5")
        elif message.photo:
            if media_count >= 5:
                await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 5 —Ñ–∞–π–ª–æ–≤.")
                return
            data["media"].append(message.photo[-1].file_id)
            await message.answer(f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –§–∞–π–ª–æ–≤: {len(data['media'])}/5")
        else:
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª.")
            return

        if len(data["media"]) == 5:
            user_step[user_id] = "price"
            await message.answer("–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ 5 —Ñ–∞–π–ª–æ–≤. ‚úÖ\n–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É:", reply_markup=back_keyboard)
        return

    if step == "price":
        if any(char.isdigit() for char in message.text):
            data["price"] = message.text
            user_step[user_id] = "phone"
            await message.answer("–¶–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_keyboard)
        else:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 5000‚ÇΩ, –æ—Ç 10 000 —Ä—É–± –∏ —Ç.–¥.")
        return

    if step == "phone":
        data["phone"] = message.text
        user_step[user_id] = "confirm"

        summary = (
            f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:\n\n"
            f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
            f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('company')}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {data.get('link', '‚Äî')}\n"
            f"üìé –§–∞–π–ª–æ–≤: {len(data.get('media', []))}\n"
            f"üí∞ –¶–µ–Ω–∞: {data.get('price')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
        )
        await message.answer(summary, reply_markup=confirm_keyboard)
        return

    await message.answer("–°–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start.")

@dp.callback_query(F.data == "confirm")
async def confirm_submission(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = user_data.get(user_id)
    if not data:
        await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ /start.")
        return

    text = (
        f"üéâ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞!\n\n"
        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('company')}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {data.get('link', '‚Äî')}\n"
        f"üí∞ –¶–µ–Ω–∞: {data.get('price')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª
    try:
        await bot.send_message(CHANNEL_ID, text)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        if data.get("media"):
            media_group = []
            for file_id in data["media"]:
                if file_id.startswith("BAACAg"):  # –∏—Å–∫–ª—é—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –∏ –ø—Ä.
                    continue
                media_group.append(types.InputMediaPhoto(media=file_id))
            if media_group:
                await bot.send_media_group(CHANNEL_ID, media_group[:10])  # –º–∞–∫—Å–∏–º—É–º 10

        await callback.message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=ReplyKeyboardRemove())
        await callback.message.answer("–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É? –í–≤–µ–¥–∏—Ç–µ /start")

    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")

    user_step[user_id] = "done"
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())